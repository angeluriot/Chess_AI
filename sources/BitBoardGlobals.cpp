#include "BitBoard.h"
#include "utils.h"
#include <SFML/Graphics.hpp>

/*
**  ==============================
**
**  BitBoardGlobals
**
**  ==============================
*/

void BitBoardGlobals::init_sliders_attacks(Piece piece)
{
	if (piece != Piece::White_Rook && piece != Piece::White_Bishop)
		return;
	bool is_rook = (piece == Piece::White_Rook);

	for (uint8_t square = 0; square < 64; square++)
	{
		uint64_t attack_mask = is_rook ? rook_masks[square] : bishop_masks[square];
		uint8_t relevant_bits_count = count_bits(attack_mask);

		uint64_t occupancy_indices = (1ULL << relevant_bits_count);

		for (uint64_t index = 0; index < occupancy_indices; index++)
		{
			uint64_t occupancy = set_occupancy(index, relevant_bits_count, attack_mask);
			uint64_t magic_index = (occupancy * (is_rook ? rook_magic_numbers[square] : bishop_magic_numbers[square])) >> (64 - (is_rook ? rook_relevant_bits[square] : bishop_relevant_bits[square]));
			if (is_rook)
				rook_attacks[square][magic_index] = rook_threats_with_blockers(square, occupancy);
			else
				bishop_attacks[square][magic_index] = bishop_threats_with_blockers(square, occupancy);
		}
	}
}

BitBoardGlobals::BitBoardGlobals()
{
	square_to_coords = {
		"a8", "b8", "c8", "d8", "e8", "f8", "g8", "h8",
		"a7", "b7", "c7", "d7", "e7", "f7", "g7", "h7",
		"a6", "b6", "c6", "d6", "e6", "f6", "g6", "h6",
		"a5", "b5", "c5", "d5", "e5", "f5", "g5", "h5",
		"a4", "b4", "c4", "d4", "e4", "f4", "g4", "h4",
		"a3", "b3", "c3", "d3", "e3", "f3", "g3", "h3",
		"a2", "b2", "c2", "d2", "e2", "f2", "g2", "h2",
		"a1", "b1", "c1", "d1", "e1", "f1", "g1", "h1"
	};

	not_col = {
		18374403900871474942ULL, // Not column a
		18302063728033398269ULL, // Not column b
		18157383382357244923ULL, // ...
		17868022691004938231ULL,
		17289301308300324847ULL,
		16131858542891098079ULL,
		13816973012072644543ULL,
		9187201950435737471ULL
	};

	not_rank = {
		18446744073709551360ULL,
		18446744073709486335ULL,
		18446744073692839935ULL,
		18446744069431361535ULL,
		18446742978492891135ULL,
		18446463698244468735ULL,
		18374967954648334335ULL,
		72057594037927935ULL
	};

	rook_relevant_bits = {
		12, 11, 11, 11, 11, 11, 11, 12,
		11, 10, 10, 10, 10, 10, 10, 11,
		11, 10, 10, 10, 10, 10, 10, 11,
		11, 10, 10, 10, 10, 10, 10, 11,
		11, 10, 10, 10, 10, 10, 10, 11,
		11, 10, 10, 10, 10, 10, 10, 11,
		11, 10, 10, 10, 10, 10, 10, 11,
		12, 11, 11, 11, 11, 11, 11, 12
	};

	bishop_relevant_bits = {
		6, 5, 5, 5, 5, 5, 5, 6,
		5, 5, 5, 5, 5, 5, 5, 5,
		5, 5, 7, 7, 7, 7, 5, 5,
		5, 5, 7, 9, 9, 7, 5, 5,
		5, 5, 7, 9, 9, 7, 5, 5,
		5, 5, 7, 7, 7, 7, 5, 5,
		5, 5, 5, 5, 5, 5, 5, 5,
		6, 5, 5, 5, 5, 5, 5, 6
	};

	rook_magic_numbers = {
		1197992689614784514ULL, 73231877439504448ULL, 9223442693932224800ULL, 3459896471785586950ULL,
		297237575406469792ULL, 4611723676700871680ULL, 2451233699497386048ULL, 9007201473533952ULL,
		10448359933505191937ULL, 8802803916800ULL, 576751023374204930ULL, 1099512743296ULL,
		1197918187454626ULL, 844636076638210ULL, 9227893245848323104ULL, 306262444201739296ULL,
		1801475091188679720ULL, 1157566945696940544ULL, 21469064178205220ULL, 622064096579158656ULL,
		9224236459153199873ULL, 5908723295226429952ULL, 351844287254540ULL, 2714153110217220ULL,
		36037593351061576ULL, 578189197643417684ULL, 58547757296193797ULL, 351878080628802ULL,
		144396701707337730ULL, 288231479991894145ULL, 4620698183809372289ULL, 1252178817426948164ULL,
		12682278397414473800ULL, 18577367792353544ULL, 81064793855234048ULL, 2296879825027072ULL,
		1157497672010367264ULL, 148618787972186244ULL, 2449977026426585088ULL, 2686445573418064516ULL,
		5629533927538692ULL, 2305843842705785858ULL, 29485620502216704ULL, 149570223933572ULL,
		5332266769191010320ULL, 2594073386708109314ULL, 581513780396032ULL, 5766870730331390464ULL,
		486393158432850432ULL, 22799473516511233ULL, 9007276564382851ULL, 9570149484990480ULL,
		5647098296926288ULL, 9802084615012623424ULL, 36281684982767746ULL, 11529215080428257286ULL,
		9153437828647209ULL, 11639588444942401568ULL, 2272694829666321ULL, 1730439987096201234ULL,
		76561399823859716ULL, 144150377011610373ULL, 722073475358916608ULL, 13199608907908ULL
	};

	bishop_magic_numbers = {
		216315718732357649ULL, 109971573309456ULL, 1387108970846224576ULL, 9511893036265701446ULL,
		13836184101218418688ULL, 9223477591045177344ULL, 583216368642424832ULL, 290782364115665408ULL,
		9088563136168192ULL, 2252100739323944ULL, 9223372592751050760ULL, 2305856753511959328ULL,
		1196279423062016ULL, 6341085872109125632ULL, 4611757495290965760ULL, 576461886854267936ULL,
		90072062384669824ULL, 2251954437769217ULL, 109955508076550ULL, 4611690575396077570ULL,
		36046664909195809ULL, 10093764700572483776ULL, 36032235156144644ULL, 1163094461065200820ULL,
		1155249187936274433ULL, 194063802827648ULL, 153283195234681088ULL, 93526658081882496ULL,
		866943143285919744ULL, 1748804030303709184ULL, 576462953511158304ULL, 576601491008393280ULL,
		352430154064000ULL, 5044181142014838915ULL, 9223399524664360992ULL, 4616189695902646340ULL,
		208308011298ULL, 10376311683405873248ULL, 2306195978419970048ULL, 2254067824869442ULL,
		870360210447862850ULL, 4506349550209280ULL, 585505409310273538ULL, 9225641437511581827ULL,
		2882867820142559363ULL, 81071390396286992ULL, 1162219802001971202ULL, 2403532422643714ULL,
		4616796554925310210ULL, 11677905338601904128ULL, 1268907354366146ULL, 2533446824034304ULL,
		86322970720ULL, 234192839265763344ULL, 576610388982890624ULL, 144123988746977540ULL,
		4510198865723392ULL, 288236977787113497ULL, 90143190221471872ULL, 445858562435010692ULL,
		2308094809027445904ULL, 72057629472489760ULL, 2310348808137277576ULL, 72058419762249736ULL
	};

	for (uint8_t square = 0; square < 64; square++)
	{
		pawn_masks[Color::White][square] = get_pawn_threats_mask(square, Color::White);
		pawn_masks[Color::Black][square] = get_pawn_threats_mask(square, Color::Black);

		knight_masks[square] = get_knight_threats_mask(square);

		king_masks[square] = get_king_threats_mask(square);

		bishop_masks[square] = get_bishop_threats_mask(square);
		rook_masks[square] = get_rook_threats_mask(square);
	}

	init_sliders_attacks(Piece::White_Rook);
	init_sliders_attacks(Piece::White_Bishop);
}
